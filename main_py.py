# -*- coding: utf-8 -*-
"""main.py

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/10e8zhYCJuz_qI2_rPT9ZJWq_oHyNv426
"""

# main.py

from fastapi import FastAPI, UploadFile, File
from fastapi.responses import JSONResponse
import tensorflow as tf
import tensorflow_hub as hub
import numpy as np
from PIL import Image
import io
import requests
from food_macros import FOOD_MACROS

app = FastAPI()

# Cargar el modelo SSD MobileNet V2 desde TensorFlow Hub
model_url = "https://tfhub.dev/tensorflow/ssd_mobilenet_v2/2"
model = hub.load(model_url)

# Clases reconocidas del modelo (ID: nombre)
classes = {
    53: "apple",
    59: "pizza",
    61: "cake",
    58: "hot dog",
    60: "donut",
    54: "sandwich",
    56: "broccoli",
    52: "banana",
}

# Leer la imagen desde archivo
def read_imagefile(file) -> np.ndarray:
    image = Image.open(io.BytesIO(file)).convert("RGB")
    image = np.array(image)
    return image

# Detección de objetos
def detect_objects(image, model):
    input_tensor = tf.convert_to_tensor(image)
    input_tensor = input_tensor[tf.newaxis, ...]

    detections = model(input_tensor)
    class_ids = detections['detection_classes'][0].numpy().astype(int)
    scores = detections['detection_scores'][0].numpy()
    boxes = detections['detection_boxes'][0].numpy()

    return class_ids, scores, boxes

# Consultar macros desde OpenFoodFacts
def get_macronutrients(food_name):
    return FOOD_MACROS.get(food_name.lower(), {
        "proteins": "No disponible",
        "carbs": "No disponible",
        "fats": "No disponible",
        "kcal": "No disponible"
    })

# Endpoint principal
@app.post("/detect/")
async def detect_food(file: UploadFile = File(...)):
    contents = await file.read()
    img = read_imagefile(contents)

    class_ids, scores, _ = detect_objects(img, model)
    threshold = 0.5
    detected_foods = []

    for idx, score in enumerate(scores):
        if score >= threshold:
            class_id = class_ids[idx]
            food_name = classes.get(class_id, "Unknown")
            detected_foods.append(food_name)

    if not detected_foods:
        return JSONResponse(content={"message": "No se detectó ningún alimento conocido."})

    results = []
    for food in detected_foods:
        macros = get_macronutrients(food)
        results.append({
            "food": food,
            "macronutrients": macros
        })

    return JSONResponse(content={"detections": results})
